<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C语言基础</title>
    <url>/2023/11/21/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>一、关键字<br>    C语言的关键字是具有特殊含义的保留字，它们在编程中具有特定的用途，不能被用作标识符（变量名、函数名等）。以下是C语言的关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto      double    int       struct</span><br><span class="line">break     else      long      switch</span><br><span class="line">case      enum      register  typedef</span><br><span class="line">char      extern    return    union</span><br><span class="line">const     float     short     unsigned</span><br><span class="line">continue  for       signed    void</span><br><span class="line">default   goto      sizeof    volatile</span><br><span class="line">do        if        static    while</span><br></pre></td></tr></table></figure>
<p>下面是这些关键字的详细解释：<br>    1. <strong>auto：</strong><br>        - <code>auto</code> 关键字用于声明自动变量。自动变量是在函数内部声明的，其生命周期与函数调用的生命周期相同。<br>    2. <strong>break：</strong><br>        - <code>break</code> 用于在循环或 switch 语句中提前终止执行，跳出循环或 switch。<br>    3. <strong>case：</strong><br>        - <code>case</code> 用于 switch 语句中，表示匹配某个值时执行的代码块。<br>    4. <strong>char：</strong><br>        - <code>char</code> 用于声明字符类型的变量或函数返回值。<br>    5. <strong>const：</strong><br>        - <code>const</code> 用于声明常量，表示变量的值不能被修改。<br>    6. <strong>continue：</strong><br>        - <code>continue</code> 用于结束当前循环的当前迭代，继续下一次迭代。<br>    7. <strong>default：</strong><br>        - <code>default</code> 用于 switch 语句中，表示没有匹配到任何 case 时执行的代码块。<br>    8. <strong>do：</strong><br>        - <code>do</code> 用于构建 do-while 循环。<br>    9. <strong>double：</strong><br>        - <code>double</code> 用于声明双精度浮点数类型的变量。<br>    10. <strong>else：</strong><br>        - <code>else</code> 用于 if 语句中，表示在条件不满足时执行的代码块。<br>    11. <strong>enum：</strong><br>        - <code>enum</code> 用于声明枚举类型。<br>    12. <strong>extern：</strong><br>        - <code>extern</code> 用于声明外部变量或函数，表示这些变量或函数是在其他文件中定义的。<br>    13. <strong>float：</strong><br>        - <code>float</code> 用于声明单精度浮点数类型的变量。<br>    14. <strong>for：</strong><br>        - <code>for</code> 用于构建 for 循环。<br>    15. <strong>goto：</strong><br>        - <code>goto</code> 用于无条件跳转到程序中的标记语句。<br>    16. <strong>if：</strong><br>        - <code>if</code> 用于构建条件语句。<br>    17. <strong>int：</strong><br>    - <code>int</code> 用于声明整数类型的变量。<br>    18. <strong>long：</strong><br>        - <code>long</code> 用于声明长整数类型的变量。<br>    19. <strong>register：</strong><br>        - <code>register</code> 用于声明寄存器变量，提示编译器将变量存储在寄存器中，以提高访问速度。<br>    20. <strong>return：</strong><br>        - <code>return</code> 用于从函数中返回值。<br>    21. <strong>short：</strong><br>        - <code>short</code> 用于声明短整数类型的变量。<br>    22. <strong>signed：</strong><br>        - <code>signed</code> 用于声明有符号整数类型的变量。<br>    23. <strong>sizeof：</strong><br>        - <code>sizeof</code> 是一个运算符，用于获取数据类型或对象的大小（以字节为单位）。<br>    24. <strong>static：</strong><br>        - <code>static</code> 用于声明静态变量，表示变量的生命周期为整个程序运行期间。<br>    25. <strong>struct：</strong><br>        - <code>struct</code> 用于声明结构体类型。<br>    26. <strong>switch：</strong><br>        - <code>switch</code> 用于构建 switch 语句，实现多分支的条件选择。<br>    27. <strong>typedef：</strong><br>        - <code>typedef</code> 用于为数据类型定义新的名称。<br>    28. <strong>unsigned：</strong><br>        - <code>unsigned</code> 用于声明无符号整数类型的变量。<br>    29. <strong>void：</strong><br>        - <code>void</code> 用于表示函数无返回值，或指针无类型。<br>    30. <strong>volatile：</strong><br>        - <code>volatile</code> 用于声明变量是易变的，可能被程序以外的因素改变，因此编译器不应该对其进行优化。<br>    31. <strong>while：</strong><br>        - <code>while</code> 用于构建 while 循环。</p>
<p>注意：<br>(1)<code>goto</code> 语句在 C 语言中用于无条件地将程序控制转移到指定的标签处。尽管 <code>goto</code> 在很多编程规范中被视为不良实践，因为它可能导致程序结构变得混乱难以理解，但在某些情况下它仍然是有用的。以下是一个简单的例子，演示了 <code>goto</code> 的用法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    loop_start:</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">goto</span> loop_end;  <span class="comment">// 跳转到标签 loop_end</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Iteration %d\n&quot;</span>, i);</span><br><span class="line">        i++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">goto</span> loop_start;  <span class="comment">// 跳转到标签 loop_start</span></span><br><span class="line"></span><br><span class="line">    loop_end:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Loop ends.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上述例子中，使用 <code>goto</code> 实现了一个简单的循环。程序执行时，首先进入 <code>loop_start</code> 标签处，然后检查 <code>i</code> 是否小于 5。如果是，就输出当前迭代次数，递增 <code>i</code>，然后跳转回 <code>loop_start</code> 标签。这样循环会一直执行直到 <code>i</code> 大于等于 5，然后跳转到 <code>loop_end</code> 标签，输出 “Loop ends.”。<br>但是，过度使用 <code>goto</code> 可能导致代码难以理解和维护，因此应该谨慎使用，并在可能的情况下选择更结构化的控制流构造，如 <code>for</code> 循环、<code>while</code> 循环和 <code>do-while</code> 循环。</p>
<p>(2)<code>const</code> 和 <code>volatile</code> 修饰符可以一起使用，用于声明一个既是常量又是易变的对象。这在某些特殊的应用场景下是有用的。</p>
<ul>
<li><strong>const 和 volatile 的单独使用：</strong><ul>
<li><code>const</code> 用于声明常量，表示变量的值在初始化后不能被修改。</li>
<li><code>volatile</code> 用于声明易变的变量，表示变量的值可以在程序未明示的情况下被修改，例如由硬件或其他线程。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> constantValue = <span class="number">10</span>;    <span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> volatileValue = <span class="number">0</span>; <span class="comment">// 易变变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>const 和 volatile 一起使用：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">volatile</span> <span class="type">int</span> constVolatileValue = <span class="number">20</span>; <span class="comment">// 既是常量又是易变的变量</span></span><br></pre></td></tr></table></figure>

<p>在这个例子 中，<code>constVolatileValue</code> 被声明为既是常量又是易变的变量。这种情况可能在嵌入式系统或与硬件交互的场景下出现，其中一个变量的值在运行时可以被改变，但在程序中的其他位置不能被修改。<br><code>const</code> 和 <code>volatile</code> 的组合使用应该谨慎，因为这样的变量可能会导致一些复杂的问题，例如代码的可读性下降。在一般情况下，尽可能避免过度使用这两个修饰符，以保持代码的清晰性和可维护性。</p>
<p>二、运算符<br>    以下是 C 语言中常见的运算符，按照优先级从高到低的顺序排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. **圆括号运算符 `()`：**</span><br><span class="line">   - 用于改变运算符的结合性，明确指定表达式的计算顺序。</span><br><span class="line"></span><br><span class="line">2. **单目运算符：**</span><br><span class="line">   - `+` (正号)</span><br><span class="line">   - `-` (负号)</span><br><span class="line">   - `++` (前缀递增)</span><br><span class="line">   - `--` (前缀递减)</span><br><span class="line">   - `!` (逻辑非)</span><br><span class="line">   - `~` (按位取反)</span><br><span class="line">   - `(type)` (强制类型转换)</span><br><span class="line"></span><br><span class="line">3. **乘法、除法、取模运算符：**</span><br><span class="line">   - `*` (乘法)</span><br><span class="line">   - `/` (除法)</span><br><span class="line">   - `%` (取模)</span><br><span class="line"></span><br><span class="line">4. **加法和减法运算符：**</span><br><span class="line">   - `+` (加法)</span><br><span class="line">   - `-` (减法)</span><br><span class="line"></span><br><span class="line">5. **移位运算符：**</span><br><span class="line">   - `&lt;&lt;` (左移)</span><br><span class="line">   - `&gt;&gt;` (右移)</span><br><span class="line"></span><br><span class="line">6. **关系运算符：**</span><br><span class="line">   - `&lt;` (小于)</span><br><span class="line">   - `&gt;` (大于)</span><br><span class="line">   - `&lt;=` (小于等于)</span><br><span class="line">   - `&gt;=` (大于等于)</span><br><span class="line"></span><br><span class="line">7. **相等性运算符：**</span><br><span class="line">   - `==` (等于)</span><br><span class="line">   - `!=` (不等于)</span><br><span class="line"></span><br><span class="line">8. **按位与运算符 `&amp;`：**</span><br><span class="line"></span><br><span class="line">9. **按位异或运算符 `^`：**</span><br><span class="line"></span><br><span class="line">10. **按位或运算符 `|`：**</span><br><span class="line"></span><br><span class="line">11. **逻辑与运算符 `&amp;&amp;`：**</span><br><span class="line"></span><br><span class="line">12. **逻辑或运算符 `||`：**</span><br><span class="line"></span><br><span class="line">13. **条件运算符 `? :`：**</span><br><span class="line">    - 也称为三元运算符，形式为 `condition ? expr1 : expr2`。</span><br><span class="line"></span><br><span class="line">14. **赋值运算符 `=`：**</span><br><span class="line"></span><br><span class="line">15. **复合赋值运算符：**</span><br><span class="line">    - `+=`、`-=`、`*=`、`/=`、`%=`、`&amp;=`、`^=`、`|=`、`&lt;&lt;=`、`&gt;&gt;=`。</span><br><span class="line"></span><br><span class="line">16. **逗号运算符 `,`：**</span><br><span class="line">    - 用于连接多个表达式，按照从左到右的顺序计算。</span><br></pre></td></tr></table></figure>
<p>注意：<br>    单目运算符 <code>++</code> 和 <code>--</code> 有两种形式，即前缀递增&#x2F;递减和后缀递增&#x2F;递减。它们的优先级是相同的，但是它们的结合性是不同的。下面是 <code>++</code> 和 <code>--</code> 这两个运算符的优先级及结合性：</p>
<ol>
<li><p><strong>单目运算符 <code>++</code> 和 <code>--</code>（前缀形式）：</strong></p>
<ul>
<li>优先级高于大多数其他运算符，结合性是右结合（从右到左计算）。</li>
<li>示例：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">++i;  <span class="comment">// 前缀递增</span></span><br><span class="line">--j;  <span class="comment">// 前缀递减</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>单目运算符 <code>++</code> 和 <code>--</code>（后缀形式）：</strong></p>
<ul>
<li>优先级同样高于大多数其他运算符，但是结合性是左结合（从左到右计算）。</li>
<li>示例：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">k++;  <span class="comment">// 后缀递增</span></span><br><span class="line">m--;  <span class="comment">// 后缀递减</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<p>由于这两种形式的结合性不同，前缀形式的 <code>++</code> 和 <code>--</code> 会先执行递增或递减操作，然后再参与其他运算，而后缀形式会先参与其他运算，然后再执行递增或递减操作。这种区别在表达式中的使用时需要注意，因为它可能影响到表达式的计算顺序。</p>
<p>三、宏<br>编译时宏在程序编译的过程中起到了一些重要的作用，它们通过在源代码中进行预处理（Preprocessor）阶段的替换和操作，影响最终生成的目标代码。以下是编译时宏的一些主要作用：</p>
<ol>
<li><p><strong>代码替换：</strong> 宏允许在源代码中定义一些常量或代码片段，然后通过在预处理阶段进行替换，将宏的引用替换为具体的值或代码。这有助于提高代码的可维护性和灵活性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"><span class="type">int</span> <span class="built_in">array</span>[MAX_SIZE];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>条件编译：</strong> 宏可以用于根据条件编译的需要动态地包含或排除一些代码块。通过使用条件编译，可以根据不同的情况选择性地编译代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_MODE</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG_MODE</span></span><br><span class="line">    <span class="comment">// Debug-specific code</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>文件包含：</strong> 宏可以用于生成文件路径或名称，从而在编译时动态地包含不同的文件。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PLATFORM_HEADER <span class="string">&quot;platform_specific.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> PLATFORM_HEADER</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>防御式编程：</strong> 宏可以用于定义一些检查和断言，增强代码的健壮性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ASSERT(condition) <span class="keyword">if</span> (!(condition)) &#123; handle_assertion_failure(); &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>调试信息：</strong> 宏可以在编译时添加或删除调试信息，以便在调试时更容易追踪问题。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(message) printf(<span class="string">&quot;Debug: %s\n&quot;</span>, message)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>平台相关性：</strong> 宏可以用于标识不同平台下的特定代码块，使程序在不同平台上具有一致的行为。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line">    <span class="comment">// Windows-specific code</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__linux__)</span></span><br><span class="line">    <span class="comment">// Linux-specific code</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>性能优化：</strong> 宏可以用于在编译时进行一些简单的性能优化，例如通过内联函数或循环展开。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>需要注意的是，滥用宏可能导致代码的可读性下降，因此在使用宏时应该谨慎，并遵循良好的编码风格和最佳实践。</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>UML概述</title>
    <url>/2023/10/29/UML%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>UML</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>RTOS概述</title>
    <url>/2023/11/05/RTOS%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>1.定义：<br>    RTOS - Real-time operating system，即实时操作系统，又称即时操作系统，其是一种通用的任务管理框架，用于管理任务的运行和任务之间的交互，能够保证事件得到实时处理。与一般的操作系统相比，RTOS最大的特色是“实时性”，若有一个任务需要被执行，RTOS会在规定时间内执行该任务，而不会有较长的延时。</p>
<p>2.组成要素：<br>    (1)实时性 - 实时并不意味着快，实时是指在规定的时间内对事件进行响应；<br>    (2)操作系统 - 一种提供任务管理和协调的控制功能的系统软件；<br>    (3)嵌入式 - 运行在特定的嵌入式硬件上，功能可以裁剪，代码可以移植。</p>
<p>3.原理：</p>
<p>4.分类：</p>
]]></content>
      <categories>
        <category>RTOS</category>
      </categories>
      <tags>
        <tag>RTOS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>探索 Windows 注册表中的应用卸载信息</title>
    <url>/2024/12/23/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    <content><![CDATA[<p>Windows 系统通过注册表管理了大量系统信息，其中应用程序的安装和卸载信息则集中存放在以下两个路径中：</p>
<ul>
<li><code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</code></li>
<li><code>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall</code></li>
</ul>
<p>这些路径存储了已安装程序的详细信息，包括显示名称、版本号、卸载命令等。本文将深入解析这些注册表路径的用途，以及误操作可能带来的影响。</p>
<hr>
<h3 id="注册表路径详解"><a href="#注册表路径详解" class="headerlink" title="注册表路径详解"></a>注册表路径详解</h3><h4 id="1-64-位程序信息"><a href="#1-64-位程序信息" class="headerlink" title="1. 64 位程序信息"></a>1. <strong>64 位程序信息</strong></h4><p>路径：<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall</code></p>
<ul>
<li>用途：存储 64 位应用程序的相关信息。</li>
<li>示例：通过此路径可以找到大多数运行在 64 位系统上的主流软件的卸载信息。</li>
</ul>
<h4 id="2-32-位程序信息"><a href="#2-32-位程序信息" class="headerlink" title="2. 32 位程序信息"></a>2. <strong>32 位程序信息</strong></h4><p>路径：<code>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall</code></p>
<ul>
<li>用途：存储 32 位应用程序的相关信息。</li>
<li>机制：<code>WOW6432Node</code> 是 Windows 的兼容性机制（Windows-on-Windows 64-bit），用于支持 32 位应用程序在 64 位系统上运行。</li>
</ul>
<hr>
<h3 id="注册表项内容解析"><a href="#注册表项内容解析" class="headerlink" title="注册表项内容解析"></a>注册表项内容解析</h3><p>在上述路径下，每个已安装程序都会有一个对应的子项，其包含以下常见字段：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>DisplayName</strong></td>
<td>程序的显示名称。</td>
</tr>
<tr>
<td><strong>UninstallString</strong></td>
<td>卸载程序时使用的命令。</td>
</tr>
<tr>
<td><strong>InstallLocation</strong></td>
<td>程序的安装路径。</td>
</tr>
<tr>
<td><strong>Publisher</strong></td>
<td>程序发布者信息。</td>
</tr>
<tr>
<td><strong>Version</strong></td>
<td>程序的版本号。</td>
</tr>
<tr>
<td><strong>QuietUninstallString</strong></td>
<td>静默卸载命令，用于无提示方式卸载程序。</td>
</tr>
</tbody></table>
<hr>
<h3 id="删除注册表项的影响"><a href="#删除注册表项的影响" class="headerlink" title="删除注册表项的影响"></a>删除注册表项的影响</h3><ol>
<li><p><strong>影响“控制面板”中的显示</strong><br>删除程序的注册表信息会使其从“控制面板”或“设置”界面的“已安装应用”中消失，但程序本身仍然可能可用。</p>
</li>
<li><p><strong>影响卸载操作</strong><br>如果 <code>UninstallString</code> 信息被删除，用户将无法通过常规方式卸载该程序。</p>
</li>
<li><p><strong>可能导致程序功能异常</strong><br>某些程序依赖注册表中的配置项来运行或更新，删除相关项可能导致功能受限。</p>
</li>
</ol>
<hr>
<h3 id="清理无效注册表项的建议"><a href="#清理无效注册表项的建议" class="headerlink" title="清理无效注册表项的建议"></a>清理无效注册表项的建议</h3><p>在清理注册表时，请注意以下事项：</p>
<ol>
<li><strong>备份注册表</strong><br>使用 <code>regedit</code> 导出相关项，以备误删后恢复。<br>&#96;&#96;&#96;bash<br>regedit.exe</li>
</ol>
]]></content>
      <categories>
        <category>Windows</category>
        <category>系统管理</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>注册表</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo指令</title>
    <url>/2025/01/11/hexo%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="hexo-init"><a href="#hexo-init" class="headerlink" title="hexo init"></a>hexo init</h2><p>初始化一个新的hexo项目</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>此命令会在当前目录下创建一个新的hexo项目(myblog文件夹)，并自动安装hexo的基本文件和目录(创建一个名为_config.yml的配置文件，并创建一个名为source的文件夹，其中包含一个名为_posts的子文件夹，用于存放文章)。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>代码调试概述</title>
    <url>/2023/10/29/%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>1.代码调试概念：<br>    调试一般是指通过一些方法手段发现、定位软件运行中的错误并加以修复的过程。</p>
<p>2.代码调试作用：<br>    (1)每开发若干个模块后进行相应的代码调试，可以验证模块功能是否符合预期，更早地检测并修改软件模块的错误，可以避免在后期测试阶段一次性发现大量的、复杂的软件问题，在总体上可以提升软件开发的效率；<br>    (2)当软件运行与预期不符时，使用合适的调试方法可以快速定位到软件问题的根源，能够提升解决软件问题的效率；<br>    (3)通过调试可以了解程序的实际执行过程，加深开发人员对软件和系统的理解，提升其对代码的感知力和控制力。</p>
<p>3.代码调试常用方法：<br>    (1)通过输出Trace&#x2F;Log调试代码；<br>        a.操作：<br>        b.适用场景：<br>    (2)通过Pull-Up&#x2F;Pull-Down IO调试代码；<br>        a.操作：<br>        b.适用场景：<br>    (3)通过查看外设寄存器调试代码；<br>        a.操作：<br>        b.适用场景：<br>    (4)通过查看CPU寄存器以及堆栈调试代码；<br>        a.操作：<br>        b.适用场景：<br>    (5)通过设置断点调试代码；<br>        a.操作：<br>        b.适用场景：</p>
]]></content>
      <categories>
        <category>代码调试</category>
      </categories>
      <tags>
        <tag>代码调试</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机概述</title>
    <url>/2023/11/18/%E5%8D%95%E7%89%87%E6%9C%BA%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>1.基本概念：<br>    单片机（Microcontroller），又常称为MCU（Microcontorller Uint），其是一种集成了中央处理器（CPU）、内存（RAM和ROM）、输入\输出端口（I\O）和定时器等功能于一体的微型计算机，其通常被用于嵌入式系统中以控制各种电子设备和系统。</p>
<p>2.基本组成：<br>    （1）中央处理器（CPU）：<br>    a.CPU是MCU的核心部分，其执行指令并控制整个系统的运行；<br>    b.指令集架构（Instruction Set Architecture，ISA）是CPU能够识别和执行的指令的集合；<br>    （2）内存：<br>    a.程序存储器（ROM）包含了程序代码，通常是不可擦除的。程序一般存储在ROM中，以保持其持久性；<br>    b.数据存储器（RAM）用于存储程序执行时的临时数据，其内容在通电时被初始化，断电时被清除；<br>    （3）输入\输出端口：<br>    a.MCU通过输入\输出端口与外部设备进行通信，这些端口可以用于连接传感器、执行器和其他外设；<br>    b.输入端口接收来自外部设备的信息，而输出端口发送数据和控制信号到外部设备；<br>    （4）定时器和计数器：<br>    定时器和计数器是用于计时或计数的特殊功能模块，可用于生成精确的时间延迟、脉冲或执行其他时间相关任务；<br>    （5）通信接口：<br>    MCU通常有多种通信接口，如UART、LIN、CAN、SPI和I2C等，用于与其他设备进行数据交互；<br>    （6）时钟源：<br>    MCU需要时钟信号来同步其内部操作，时钟源可以是内部晶体振荡器或由外部输入的时钟信号；<br>    （7）中断系统：<br>    中断是一种机制，允许MCU在执行程序时响应外部事件，其通常被用于处理紧急事件以提高系统的响应能力；<br>    （8）电源部分：<br>    单片机需要适当的电源供电，电源模块通常包括电源管理单元，确保单片机正常工作并具有低功耗性；<br>    （9）系统总线：<br>    系统总线是CPU、内存和其他外设之间进行数据传输的通道，数据、地址和控制信号通过系统总线传输；<br>    （10）编程器和调试接口：<br>    MCU需要通过编程器将程序加载到ROM中，调试接口则用于调试和监视程序执行过程。</p>
<p>3.基本原理：<br>    整个MCU的工作流程是一个不断循环的过程，从上电或复位开始，通过启动代码的执行、全局变量的初始化、主程序的执行、中断处理等步骤，完成用户程序的功能。在这个过程中，MCU不断地与外部环境交互，执行各种任务，以满足特定的嵌入式应用需求。</p>
]]></content>
      <categories>
        <category>MCU</category>
        <category>单片机</category>
      </categories>
      <tags>
        <tag>MCU</tag>
        <tag>单片机</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计开发流程概述</title>
    <url>/2023/10/29/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>软件设计开发流程</tag>
        <tag>V-Cycle</tag>
        <tag>ASPICE</tag>
      </tags>
  </entry>
  <entry>
    <title>软件设计概述</title>
    <url>/2023/10/29/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>1.定义：<br>    软件结构设计是一种面向数据流的设计方法，其目的为确定软件系统中每个过程的模块组成以及模块之间的关系，其主要过程为将软件需求阶段产生的系统模型转化为软件设计模型。</p>
<p>2.分类：<br>    (1)概念上，软件设计分为：<br>        a.结构设计 - 结构设计又称总体设计，其主要任务是制定系统实施方案与设计规范、并确定软件系统的整体模块结构及接口关系；<br>        b.详细设计 - 详细设计又称模块设计，其主要任务是详细规定每个模块功能的具体实现算法。<br>    (2)工程管理上，软件设计过程分为：<br>        a.总体设计 - 总体设计亦称概要设计，该阶段将软件需求转化为数据结构和软件系统结构，确定系统接口、全局数据结构和数据库模式；<br>        b.详细设计 - 详细设计亦称过程设计，该阶段通过细化结构表示得到详细的软件数据结构和算法，用适当方式表示算法和数据结构的细节。<br>    (3)技术上，软件设计过程分为：<br>        a.体系结构设计 - 亦称模块设计，其定义软件软件模块以及模块间的关系；<br>        b.接口设计 - 包含内部接口和外部接口，其描述软件内部元素之间、模块之间、软件与外界的通信交互方式；<br>        c.数据设计 - 根据需求阶段建立的实体-关系图（E-R图）来确定软件涉及的文件系统的结构以及数据库的表结构；<br>        d.过程设计 - 确定软件各个组成部分内的算法以及内部数据结构，并选定某种表达形式来描述各种算法。</p>
<p>3.结构化设计与结构化分析关系：</p>
<img data-src="/2023/10/29/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/%E7%BB%93%E6%9E%84%E5%8C%96%E8%AE%BE%E8%AE%A1%E4%B8%8E%E7%BB%93%E6%9E%84%E5%8C%96%E5%88%86%E6%9E%90%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="">

<p>4.实施要点：<br>    (1)分析数据流图，明确数据加工过程；<br>    (2)根据数据流图明确问题类型，数据处理问题通常有变换型和事物型两种类型，使用相应的方法进行分析处理；<br>    (3)根据数据流图确定系统的初始结构图；<br>    (4)改进优化系统的初始结构图；<br>    (5)根据分析模型中的E-R图和数据字典（数据模型）进行数据设计，包括数据库设计或数据文件的设计；<br>    (6)在以上基础上，根据分析模型中的加工规格说明（功能模型）、状态转换图以及控制规格说明（行为模型）进行过程设计；<br>    (7)制定测试计划。</p>
<p>5.术语：<br>    (1)模块 - 程序语句按逻辑关系建立的组合体，其在结构化程序设计中表现为函数或子程序；<br>    (2)原子模块 - 功能独立、无法再分解的模块；<br>    (3)传入模块 - 获取输入数据，经过某些处理后再传送给其他模块，其传送的数据流称为逻辑输入数据流；<br>    (4)传出模块 - 获取输出数据，对该数据进行某些处理后再将其输出给其他模块或系统外部（最终目标是输出到系统外部），其传送的数据流称为逻辑输出数据流；<br>    (5)变换模块 - 亦称加工模块，其从上层调用模块获取数据，进行特定处理并转换成其他形式，再将加工结果返回给上层调用模块，其加工的数据流称为变换数据流；<br>    (6)协调模块 - 该模块一般不对数据进行加工，其主要通过调用、协调和管理其他模块来完成特定的功能，如结构化设计程序中的主程序；<br>    (7)耦合 - 模块间互相连接的紧密程度的度量；<br>    (8)内聚 - 一个模块内部各个组成元素之间相互结合的紧密程度的度量。</p>
<p>6.软件设计方法：<br>    (1)结构化设计方法 - 结合结构化分析方法，根据系统的数据流进行设计（面向数据流或过程驱动的设计），遵循自顶向下的系统化分解思想，应用相关的转换规则将软件的数据流图逐步转换为功能相对独立、执行相互协调、数据相互交换的一组模块的层次结构，并综合质量评价因素进行结构优化；<br>    (2)数据结构驱动设计方法 - 根据系统的数据结构进行设计（面向数据结构或数据驱动的设计），使用表达工具描述数据结构的格式，应用相关的规则将数据结构格式为程序的控制格式，最后再细化定义；<br>    (3)面向对象设计方法 - 根据面向对象分析建立起来的对象&#x2F;类分析模型，进一步分解和改进这个对象的层次模型，确定对象的构造以及对象之间的动态关系，最后实现对象中提供的方法的过程设计。</p>
<p>7.结构化设计的核心思想：<br>    应用抽象原则，将系统功能逐层分解为层次化的模块结构。</p>
<p>8.结构化设计的原理：<br>    (1)抽象 - 过程抽象和数据抽象；<br>    (2)细化 - 在原始说明的基础上进行详细说明，不断细化给出更多细节；<br>    (3)自顶向下，逐步求精；<br>    (4)信息隐藏和局部化；<br>    (5)模块化 - 按照规定原则，把软件划分成若干个模块，每个模块完成一个子功能，把这些模块集中起来组成一个整体，可以完成指定的功能，实现问题的求解，这实质上是系统求解和抽象的过程。</p>
<p>9.结构化设计的原则：<br>    (1)降低模块的耦合性，提高模块的内聚性；<br>    (2)模块规模应该适中；<br>    (3)选择适当的深度、宽度、扇出和扇入；<br>    (4)模块的作用域应处于其控制域范围之内；<br>    (5)尽量降低模块的接口复杂度；<br>    (6)设计单入口单出口的模块；<br>    (7)模块功能应该可以预测。</p>
]]></content>
      <categories>
        <category>软件设计</category>
      </categories>
      <tags>
        <tag>软件设计</tag>
      </tags>
  </entry>
</search>
